// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BGAME_H_
#define FLATBUFFERS_GENERATED_BGAME_H_

#include "flatbuffers.h"

struct BoardGame;

struct BoardGame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DESCRIPTION = 4
  };
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           verifier.EndTable();
  }
};

struct BoardGameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(BoardGame::VT_DESCRIPTION, description);
  }
  explicit BoardGameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BoardGameBuilder &operator=(const BoardGameBuilder &);
  flatbuffers::Offset<BoardGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BoardGame>(end);
    return o;
  }
};

inline flatbuffers::Offset<BoardGame> CreateBoardGame(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> description = 0) {
  BoardGameBuilder builder_(_fbb);
  builder_.add_description(description);
  return builder_.Finish();
}

inline flatbuffers::Offset<BoardGame> CreateBoardGameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *description = nullptr) {
  auto description__ = description ? _fbb.CreateString(description) : 0;
  return CreateBoardGame(
      _fbb,
      description__);
}

inline const BoardGame *GetBoardGame(const void *buf) {
  return flatbuffers::GetRoot<BoardGame>(buf);
}

inline const BoardGame *GetSizePrefixedBoardGame(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<BoardGame>(buf);
}

inline bool VerifyBoardGameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BoardGame>(nullptr);
}

inline bool VerifySizePrefixedBoardGameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BoardGame>(nullptr);
}

inline void FinishBoardGameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<BoardGame> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBoardGameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<BoardGame> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_BGAME_H_
